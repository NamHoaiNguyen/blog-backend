version: "3.8"
services:
    backend:
        container_name: backend-blog
        build: 
            context: .
            dockerfile: Dockerfile
        restart: unless-stopped
        user: "1000:1000"
        volumes:
            - .:/home/node
            - /home/node/node_modules
        environment:
            - DB_HOST=database-mysql
            - MYSQL_DATABASE=$MYSQL_DBNAME
            - MYSQL_PASSWORD=$MYSQL_PASSWORD
            - MYSQL_PORT=$MYSQL_PORT
            # - REDIS_HOST=$cache
            # - REDIS_PORT=$REDIS_PORT
            # - REDIS_PASSWORD=$REDIS_PASSWORD
        depends_on:
            - database-mysql
            # - redis-master
            # - redis-slave1
        ports:
            - '3301:3301'
        expose:
            - 3301
        networks:
            - blog-backend-network

    database-mysql:
        image: mysql:8.0.28-debian
        restart: unless-stopped
        # user: "1000:1000"
        volumes:
            - dbdata:/var/lib/mysql
        env_file:
            - .env
        environment:
            - MYSQL_ROOT_USERNAME=$MYSQL_USERNAME
            - MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD
        ports:
            - '3306:3306'
        expose:
            - 3306
        networks:
            - blog-backend-network
    
    swagger-editor:
        image: "swaggerapi/swagger-editor:latest"
        container_name: "swagger-editor"
        ports:
        - "8081:8080"

    swagger-ui:
        image: "swaggerapi/swagger-ui:latest"
        container_name: "swagger-ui"
        ports:
        - "8082:8080"
        volumes:
        - ./swagger/openapi.json:/openapi.json
        # environment:
        # -   SWAGGER_JSON: /openapi.json
        # API_URL: ""

    swagger-api:
        image: "danielgtaylor/apisprout:latest"
        container_name: "swagger-api"
        ports:
            - "8083:8000"
        volumes:
            - ./swagger/openapi.json:/openapi.json
        command: /openapi.json
        # networks:
        # swagger_link:
        #     aliases:
        #     - local.swagger.apisprout
        networks:
            - blog-backend-network

    # swagger-nginx:
    #     image: nginx:mainline-alpine
    #     container_name: "swagger-nginx"
    #     ports:
    #     - "8084:8084"
    #     volumes:
    #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    #     # networks:
    #     # swagger_link:
    #     #     aliases:
    #     #     - local.swagger.api
    #     networks:
    #         - oauth2-authen_kong-net

    # redis-master:
    #     image: redis:6.2-alpine
    #     restart: unless-stopped
    #     ports:
    #         - '6379:6379'
    #     command: redis-server --save 20 1 --loglevel warning --requirepass 123
    #     environment:
    #         - REDIS_REPLICAATION_MODE=master
    #     volumes:
    #         - $PWD/redis-data:/var/lib/redis
    #         - $PWD/redis-master-conf:/usr/local/etc/redis/redis.conf
    #         # - cache:/data

    # redis-slave1:
    #     image: redis:6.2-alpine
    #     restart: unless-stopped
    #     ports:
    #         - '6378:6379'
    #     # command: redis-server --include /usr/local/etc/redis/redis.conf
    #     command: redis-server --requirepass 123 --replicaof redis-master 6379 --masterauth 123
    #     environment:
    #         - REDIS_REPLICATION_MODE=slave
    #     volumes:
    #         - $PWD/redis-data:/var/lib/redis
    #         - $PWD/redis-slave-conf/:/usr/local/etc/redis/redis.conf

volumes:
  dbdata:

networks:
  blog-backend-network:
    name: blog-backend-network
    external: true